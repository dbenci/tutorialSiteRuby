
// Some variables to use later
$button-width: 300px;
$button-height: 70px;
$button-border: 3px;
$icon-padding: 5px;
$icon-width: $button-height - ($icon-padding * 2);
$ball-width: 18px;

body {
  background-color: #323536;
}

// Button container
.download-button-container {
  position: relative;
  width: $button-width;
  height: $button-height;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  margin-top: 50px;

  // Following are the different states for the button: downloading, progressing and completed
  // We have defined the states in the container to have access to all descendants in CSS

  // Downloading: The download button has been pressed
  &.downloading {

    .download-button {
      width: $button-height;
    }

    .button-text-download {
      top: 80%;
      transform: translateY(-50%) scale(1);
      opacity: 0;
    }

    .button-wave {
      left: -10px;

      &:before {
        background-color: transparent;
        transform: scale(1.6);
      }
    }

    .button-icon-svg {
      transform: rotate(0deg);
    }

    .button-icon-path-square {
      fill: white;
    }
  }

  // Progressing: The progress starts
  &.progressing {

    .button-icon {
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .button-ball {
      left: - $ball-width / 2;
      top: - $ball-width / 2;
      width: $ball-width;
      height: $ball-width;
    }
  }

  // Completed: The progress ends
  &.completed {

    .download-button {
      width: $button-width - $button-height;
    }

    .button-icon {
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .button-icon, .button-svg {
      opacity: 0;
      transition: 0.3s;
    }

    .button-text-done {
      transform: translate(-50%, -50%);
      opacity: 1;
      transition: 0.8s 1s cubic-bezier(0.175, 0.885, 0.320, 1.275); /* easeOutBack */
    }

    .border-path {
      stroke: #00FF8D;
    }

    .button-ball {
      left: 50%;
      transition: none;
      // CSS animations for the ball. All of them starts at the same time, so we need to take care of delays
      animation:
              ball-throw-up 0.5s ease-out forwards, // Throw up the ball for 0.5s
              ball-throw-down 0.5s 0.5s ease-in forwards, // Wait 0.5 seconds (throw up), and throw down the ball for 0.5s
              ball-rubber 1s forwards; // Move the ball like a rubber deformation during 1s (throw up + throw down)
    }
  }
}

// Throw up animation
@keyframes ball-throw-up {
  from {
    transform: translate(-50%, 17.5px);
  }
  to {
    transform: translate(-50%, -60px);
    background-color: #00FF8D;
  }
}

// Throw down animation
@keyframes ball-throw-down {
  from {
    transform: translate(-50%, -60px);
  }
  to {
    transform: translate(-50%, 80px);
  }
}

// Rubber animation
@keyframes ball-rubber {
  from {
    width: $ball-width;
  }
  25% {
    width: $ball-width * 0.75;
  }
  50% {
    width: $ball-width;
  }
  to {
    width: $ball-width / 2;
  }
}

// Real button styles
.download-button {
  position: relative;
  display: inline-block;
  width: $button-width;
  height: $button-height;
  background-color: #2C2E2F;
  border: none;
  box-shadow: 0 0 0 $button-border #02D1FF; // This will be the 'border'
  border-radius: 100px;
  cursor: pointer;
  transition: 1s width, 0.3s box-shadow;

  // Remove the default behavior of buttons
  &, &:focus {
    padding: 0;
    outline: none;
  }
  &::-moz-focus-inner {
    border: 0;
  }

  // Styles for the different states of the button
  &:hover, &:active, &:focus {
    box-shadow: 0 0 0 $button-border #02D1FF, 0 0 20px $button-border darken(#02D1FF, 20%);
  }
  &.button-hidden {
    box-shadow: 0 0 0 $button-border transparent;
    &:hover, &:active, &:focus {
      box-shadow: 0 0 0 $button-border transparent, 0 0 20px $button-border darken(#02D1FF, 20%);
    }
  }
}

.button-icon {
  position: absolute;
  left: 5px;
  top: 50%;
  transform: translateY(-50%);
  width: $icon-width;
  height: $icon-width;
  background-color: #02D1FF;
  border-radius: 100%;
}

.button-icon-svg {
  width: 100%;
  height: 100%;
  transform: rotate(-225deg);
  transition: 1s transform;
}

.button-icon-path {
  fill: transparent;
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-width: $button-border;
  stroke: white;
}

.button-icon-path-square {
  transition: 0.8s 0.2s fill;
}

.button-text {
  position: absolute;
  top: 50%;
  color: white;
  font-size: 1.3em;
  pointer-events: none;
}

.button-text-download {
  left: $button-width / 2 - $icon-width / 2;
  transform: translateY(-50%);
  transition: transform 1s, top 0.3s 0.2s, opacity 0.3s 0.2s;
}

.button-text-done {
  left: 50%;
  transform: translate(-50%, $button-height / 2);
  opacity: 0;
  transition: 0.5s opacity, 1s transform;
}

.button-wave {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  left: -9999em;
  top: 50%;
  transform: translateY(-50%);
  width: $icon-width + 30px;
  height: $icon-width + 30px;
  border-radius: 100%;
  overflow: hidden;
  pointer-events: none;

  &:before {
    content: '';
    width: $icon-width;
    height: $icon-width;
    background-color: rgba(255, 255, 255, 1);
    border: 5px solid rgba(255, 255, 255, 1);
    border-radius: 100%;
    transition: 0.5s background, 1s transform;
    transition-timing-function: ease-out;
  }
}

.button-progress-container {
  position: absolute;
  width: 100px;
  height: 100px;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  pointer-events: none;
}

.button-svg {
  width: 100%;
  height: 100%;

  .button-circular-progress {
    fill: none;
    stroke-width: 5px;
    stroke: white;
  }
}

.button-ball {
  position: absolute;
  left: 0;
  top: 0;
  width: 0;
  height: 0;
  background-color: white;
  border-radius: 100%;
  pointer-events: none;
  transition: 0.5s cubic-bezier(0.175, 0.885, 0.320, 1.875); /* easeOutBackModified */
  transition-property: left, top, width, height;
}

.button-linear-progress {
  position: absolute;
  width: $icon-width - $icon-padding * 2;
  height: $icon-width - $icon-padding * 2;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  background-color: #00AFD7;
  border-radius: 100%;
  overflow: hidden;
}

.button-linear-progress-bar {
  display: inline-block;
  width: 100%;
  height: 100%;
  background-color: #02D1FF;
}

.border-svg {
  position: absolute;
  top: -5px;
  left: 50%;
  transform: translateX(-50%);
  pointer-events: none;
}

.border-path {
  fill: #2C2E2F;
  stroke-width: $button-border;
  stroke: #02D1FF;
  transition: 0.3s 1s stroke;
}

.hidden {
  visibility: hidden !important;
  opacity: 0 !important;
}

html {
  font-family: sans-serif; // 1
  -ms-text-size-adjust: 100%; // 2
  -webkit-text-size-adjust: 100%; // 2
}

body {
  margin: 0;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

audio,
canvas,
progress,
video {
  display: inline-block; // 1
  vertical-align: baseline; // 2
}

audio:not([controls]) {
  display: none;
  height: 0;
}

[hidden],
template {
  display: none;
}

a {
  background-color: transparent;
}

a:active,
a:hover {
  outline: 0;
}

abbr[title] {
  border-bottom: 1px dotted;
}

b,
strong {
  font-weight: bold;
}

dfn {
  font-style: italic;
}

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

mark {
  background: #ff0;
  color: #000;
}

small {
  font-size: 80%;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

img {
  border: 0;
}

svg:not(:root) {
  overflow: hidden;
}

figure {
  margin: 1em 40px;
}


hr {
  box-sizing: content-box;
  height: 0;
}


pre {
  overflow: auto;
}

code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

button,
input,
optgroup,
select,
textarea {
  color: inherit; // 1
  font: inherit; // 2
  margin: 0; // 3
}

button {
  overflow: visible;
}

button,
select {
  text-transform: none;
}

button,
html input[type="button"], // 1
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button; // 2
  cursor: pointer; // 3
}


button[disabled],
html input[disabled] {
  cursor: default;
}

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

input {
  line-height: normal;
}

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box; // 1
  padding: 0; // 2
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

input[type="search"] {
  -webkit-appearance: textfield; // 1
  box-sizing: content-box; //2
}

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

legend {
  border: 0; // 1
  padding: 0; // 2
}

textarea {
  overflow: auto;
}

optgroup {
  font-weight: bold;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

.container{
  height: 100%;
 // background: #222222;
  font-family: 'Lato', sans-serif;
}/*
.image-position{
    position: absolute;
    left: 3%;
}
.image-position img{
    width: 70%;
}

.loanParamsLoader {
    top: 143px;
    margin: auto;
    position: absolute;
    right: 17%;
    width: 135%;
}
*/

.center-block{
  width: 100%;
}

.question{
  background: #02D1FF;
  padding: 20px;
  color: #fff;
  border-bottom-right-radius: 55px;
  border-top-left-radius: 55px;
}

#qid{
  margin-right: 22px;
  background-color: #ffffff;
  color: #aaaaaa;
}

.container ul{
  list-style: none;
  margin: 0 auto;
  padding: 0;
}

.container ul li{
  color: #AAAAAA;
  display: block;
  position: relative;
  float: left;
  width: 100%;
  height: 100px;
  border-bottom: 1px solid #111111;
}

.container ul li input[type=radio]{
  position: absolute;
  visibility: hidden;
}

.container ul li label{
  display: block;
  position: relative;
  font-weight: 300;
  font-size: 1.35em;
  padding: 25px 25px 25px 80px;
  margin: 10px auto;
  height: 30px;
  z-index: 9;
  cursor: pointer;
  -webkit-transition: all 0.25s linear;
}

.container ul li:hover label{
  color: #FFFFFF;
}

.container ul li .check{
  display: block;
  position: absolute;
  border: 5px solid #AAAAAA;
  border-radius: 100%;
  height: 30px;
  width: 30px;
  top: 30px;
  left: 20px;
    z-index: 5;
    transition: border .25s linear;
    -webkit-transition: border .25s linear;
}

.container ul li:hover .check {
  border: 5px solid #FFFFFF;
}

.container ul li .check::before {
  display: block;
    position: absolute;
    content: '';
    border-radius: 100%;
    height: 14px;
    width: 14px;
    top: 3px;
    left: 3px;
  margin: auto;
    transition: background 0.25s linear;
    -webkit-transition: background 0.25s linear;
}

.container input[type=radio]:checked ~ .check {
  border: 5px solid #02D1FF;
}

.container input[type=radio]:checked ~ .check::before{
  background: #02D1FF;
}

.container input[type=radio]:checked ~ label{
  color: #02D1FF;
}

#result-of-question th{
  text-align: center;
    background: rgb(11, 187, 226);
    color: #fff;
    padding: 18px;
    font-size: 18px;
    border: none;
}

#result-of-question  td{
  text-align: center;
    color: #222;
    background-color: #fff;
    padding: 18px;
    font-size: 15px;
    font-weight: 600;
    border: 1px solid rgb(11, 187, 226);
}

#totalCorrect{
  color: #fff;
  background: rgb(11, 187, 226);
  padding: 22px 20px;
  border-radius: 1px;
  font-stretch: expanded;
  font-size: 28px;
  font-weight: bold;
  border-top-right-radius: 25px;
  border-top-left-radius: 25px;  
}

.ink {
  display: inline; 
  position: absolute;
  background: #02D1FF;
  border-radius: 100%;
  transform: scale(0);
}

.ink.animate {animation: ripple 0.65s linear;}
@keyframes ripple {
    100% {opacity: 0; transform: scale(2.5);}
}












